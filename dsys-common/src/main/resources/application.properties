server.port=8079

spring.datasource.driverClass=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://39.105.66.208:3306/dsys?useSSL=false&characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=As297514094
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# Hikari配置
# 是否自动提交
spring.datasource.hikariProperties.autocommit= true
# 此属性控制允许池到达的最大大小，包括空闲和正在使用的连接。
spring.datasource.hikariProperties.maximumPoolSize= 10
# 控制HikariCP尝试在池中维护的最小空闲连接数。建议不要设置此值，而是允许HikariCP充当固定大小的连接池。 默认值：与maximumPoolSize相同
spring.datasource.hikariProperties.minimumIdle= 2
# 控制允许连接在池中空闲的最长时间
spring.datasource.hikariProperties.idleTimeout= 600000
# 如果在没有连接可用的情况下超过此时间，则将抛出SQLException
spring.datasource.hikariProperties.connectionTimeout= 30000
# 控制池中连接的最长生命周期。使用中的连接永远不会退役，只有当它关闭时才会被删除
spring.datasource.hikariProperties.maxLifetime= 1800000

# Druid配置
# 初始化时建立物理连接的个数
spring.datasource.druidProperties.initialSize=5
# 最大连接池数量
spring.datasource.druidProperties.maxActive=30
# 最小连接池数量
spring.datasource.druidProperties.minIdle=5
# 获取连接时最大等待时间，单位毫秒
spring.datasource.druidProperties.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druidProperties.timeBetweenEvictionRunsMillis=60000
# 连接保持空闲而不被驱逐的最小时间
spring.datasource.druidProperties.minEvictableIdleTimeMillis=300000
# 用来检测连接是否有效的sql，要求是一个查询语句
spring.datasource.druidProperties.validationQuery=SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druidProperties.testWhileIdle=true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druidProperties.testOnBorrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druidProperties.testOnReturn=false
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druidProperties.poolPreparedStatements=true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
spring.datasource.druidProperties.maxPoolPreparedStatementPerConnectionSize=50
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计
spring.datasource.druidProperties.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druidProperties.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
# 合并多个DruidDataSource的监控数据
spring.datasource.druidProperties.useGlobalDataSourceStat=true



mybatis.mapper-locations=classpath:mapper/*Mapper.xml
mybatis-plus.configuration.map-underscore-to-camel-case=true

#redis配置
spring.redis.host=39.105.66.208
spring.redis.port=6379
spring.redis.database=0
spring.redis.password=As297514094
spring.redis.timeout=6000000
#sentinel/cluster/single
spring.redis.mode=single
#连接池配置
spring.redis.pool.max-idle=16
spring.redis.pool.max-active=8
spring.redis.pool.max-wait=6000
spring.redis.pool.min-idle=4
spring.redis.pool.size=10
spring.redis.pool.conn-timeout=6000000
spring.redis.pool.so-timeout=3000
#单机配置
spring.redis.single.address=39.105.66.208:6379
#集群配置
spring.redis.cluster.scanInterval=1000
spring.redis.cluster.nodes=
spring.redis.cluster.readMode=SLAVE
spring.redis.cluster.retryAttempts=3
spring.redis.cluster.failedAttempts=3
spring.redis.cluster.slaveConnectionPoolSize=64
spring.redis.cluster.masterConnectionPoolSize=64
spring.redis.cluster.retryInterval=1500
#哨兵配置
spring.redis.sentinel.master=business-master
spring.redis.sentinel.nodes=
spring.redis.sentinel.masterOnlyWrite=true
spring.redis.sentinel.failMax=3
#集成邮件设置
spring.mail.host=smtp.163.com
spring.mail.username=18535936100@163.com
spring.mail.password=As297514094
spring.mail.port=465
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.ssl.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

mail.from=18535936100@163.com
mail.fromName=Admin